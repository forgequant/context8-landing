name: CD - Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  DEPLOY_USER: 'deployer'
  APP_DIR: '/opt/context8-landing'

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://context8.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            ${{ env.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} \
            "echo 'SSH connection successful'"

      - name: Create application directory
        run: |
          ssh -i ~/.ssh/deploy_key \
            ${{ env.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} \
            "sudo mkdir -p ${{ env.APP_DIR }} && \
             sudo chown -R ${{ env.DEPLOY_USER }}:${{ env.DEPLOY_USER }} ${{ env.APP_DIR }}"

      - name: Sync files to server
        run: |
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.next' \
            --exclude 'coverage' \
            --exclude 'playwright-report' \
            --exclude '.env*.local' \
            ./ ${{ env.DEPLOY_USER }}@${{ secrets.SERVER_HOST }}:${{ env.APP_DIR }}/

      - name: Create production environment file
        run: |
          ssh -i ~/.ssh/deploy_key \
            ${{ env.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} \
            "cd ${{ env.APP_DIR }} && \
             cat > .env.production << 'EOF'
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          DOMAIN=${{ secrets.DOMAIN }}
          DOCKER_BUILD=true
          EOF"

      - name: Run deployment script
        run: |
          ssh -i ~/.ssh/deploy_key \
            ${{ env.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} \
            "cd ${{ env.APP_DIR }} && \
             chmod +x scripts/deploy.sh && \
             ./scripts/deploy.sh"

      - name: Verify deployment
        run: |
          # Wait for application to start
          sleep 10

          # Check health endpoint
          HEALTH_URL="https://${{ secrets.DOMAIN }}/api/health"

          for i in {1..10}; do
            if curl -sf "$HEALTH_URL" > /dev/null; then
              echo "Health check passed"
              exit 0
            fi
            echo "Waiting for health check... ($i/10)"
            sleep 5
          done

          echo "Health check failed after 50 seconds"
          exit 1

      - name: Cleanup SSH keys
        if: always()
        run: rm -f ~/.ssh/deploy_key

      - name: Deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Server**: ${{ secrets.SERVER_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Domain**: https://${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verification" >> $GITHUB_STEP_SUMMARY
          echo "- Health: https://${{ secrets.DOMAIN }}/api/health" >> $GITHUB_STEP_SUMMARY
          echo "- Website: https://${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Execute rollback script
        run: |
          ssh -i ~/.ssh/deploy_key \
            ${{ env.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} \
            "cd ${{ env.APP_DIR }} && \
             chmod +x scripts/rollback.sh && \
             ./scripts/rollback.sh"

      - name: Verify rollback
        run: |
          sleep 10
          HEALTH_URL="https://${{ secrets.DOMAIN }}/api/health"

          if curl -sf "$HEALTH_URL" > /dev/null; then
            echo "Rollback successful - application is healthy"
          else
            echo "Rollback failed - manual intervention required"
            exit 1
          fi

      - name: Cleanup SSH keys
        if: always()
        run: rm -f ~/.ssh/deploy_key

      - name: Notify rollback
        if: always()
        run: |
          echo "## Rollback Executed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Deployment failed and was automatically rolled back." >> $GITHUB_STEP_SUMMARY
          echo "Previous version has been restored." >> $GITHUB_STEP_SUMMARY

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy, rollback]
    if: always()

    steps:
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Deployment ${{ needs.deploy.result == 'success' && 'succeeded' || 'failed' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Context8 Landing Deployment*\n\nStatus: ${{ needs.deploy.result == 'success' && ':white_check_mark: Success' || ':x: Failed' }}\nCommit: `${{ github.sha }}`\nAuthor: ${{ github.actor }}\n<https://context8.io|View Site>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: 'Deployment Failed: Context8 Landing'
          to: ${{ secrets.ALERT_EMAIL }}
          from: GitHub Actions
          body: |
            Deployment to production failed.

            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Workflow: ${{ github.workflow }}

            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
