# API Routes Specification
# Feature: MVP Website (Landing, Dashboard, Auth)
# Format: OpenAPI 3.0.3 subset for Next.js API routes

openapi: 3.0.3
info:
  title: Context8 MVP Website API
  version: 1.0.0
  description: API routes for Context8 MVP website (authentication, dashboard data)

servers:
  - url: http://localhost:3000
    description: Local development
  - url: https://context8.vercel.app
    description: Production (Vercel)

paths:
  /api/auth/signin:
    get:
      summary: OAuth sign-in page
      description: Displays OAuth provider buttons (Google, GitHub)
      tags: [Authentication]
      responses:
        '200':
          description: Sign-in page rendered
          content:
            text/html:
              schema:
                type: string
                example: HTML page with OAuth buttons

  /api/auth/callback/{provider}:
    get:
      summary: OAuth callback handler
      description: Handles OAuth provider callback after user authorization
      tags: [Authentication]
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [google, github]
          description: OAuth provider name
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: OAuth authorization code
        - name: state
          in: query
          required: true
          schema:
            type: string
          description: CSRF protection state parameter
      responses:
        '302':
          description: Redirect to dashboard on success
          headers:
            Location:
              schema:
                type: string
                example: /dashboard
            Set-Cookie:
              schema:
                type: string
                example: next-auth.session-token=...; HttpOnly; Secure; SameSite=Lax
        '401':
          description: OAuth authorization failed
          content:
            text/html:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Access was denied by the provider."

  /api/auth/session:
    get:
      summary: Get current session
      description: Returns current user session data (if authenticated)
      tags: [Authentication]
      security:
        - sessionCookie: []
      responses:
        '200':
          description: Session data
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: user@example.com
                      name:
                        type: string
                        example: John Doe
                      plan:
                        type: string
                        enum: [free, pro]
                        example: free
                  expires:
                    type: string
                    format: date-time
                    example: 2025-10-22T11:00:00Z
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized — valid OAuth token required."

  /api/auth/signout:
    post:
      summary: Sign out
      description: Destroys user session and signs out
      tags: [Authentication]
      security:
        - sessionCookie: []
      responses:
        '302':
          description: Redirect to landing page
          headers:
            Location:
              schema:
                type: string
                example: /
            Set-Cookie:
              schema:
                type: string
                example: next-auth.session-token=; Max-Age=0

  /api/dashboard/usage:
    get:
      summary: Get user usage metrics
      description: Returns current usage and quota for authenticated user
      tags: [Dashboard]
      security:
        - sessionCookie: []
      responses:
        '200':
          description: Usage metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                    example: 1
                  plan:
                    type: string
                    enum: [free, pro]
                    example: free
                  usage:
                    type: object
                    properties:
                      requests:
                        type: integer
                        example: 45
                        description: Number of requests made in current period
                  quota:
                    type: object
                    properties:
                      requests:
                        type: integer
                        example: 100
                        description: Maximum requests allowed in current period
                  resetAt:
                    type: string
                    format: date-time
                    example: 2025-10-23T00:00:00Z
                    description: When usage counter resets
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/dashboard/sources:
    get:
      summary: Get available data sources
      description: Returns list of data sources with availability based on user plan
      tags: [Dashboard]
      security:
        - sessionCookie: []
      responses:
        '200':
          description: Data sources list
          content:
            application/json:
              schema:
                type: object
                properties:
                  sources:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Binance Prices
                        description:
                          type: string
                          example: Spot price, 24h change, 24h volume
                        availability:
                          type: string
                          enum: [free, pro]
                          example: free
                        status:
                          type: string
                          enum: [active, planned]
                          example: active
                        accessible:
                          type: boolean
                          example: true
                          description: Whether current user can access this source
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    sessionCookie:
      type: apiKey
      in: cookie
      name: next-auth.session-token
      description: Session token set by Auth.js after OAuth signin

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized — valid OAuth token required.
        code:
          type: integer
          example: 401

# Rate Limiting (enforced at middleware level, not individual routes)
# - Sign-in attempts: 30 per IP per hour, 15 per user per hour
# - Dashboard API: No strict rate limit (usage tracking for billing only)
# - Returns HTTP 429 when rate limit exceeded

# Notes:
# - All /api/dashboard/* routes require authentication
# - Session cookie is HttpOnly, Secure (in production), SameSite=Lax
# - CSRF protection via state parameter in OAuth flow (Auth.js handles automatically)
# - OAuth tokens never exposed to client (server-side only)
